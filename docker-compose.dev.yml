version: '3.8'
services:
  # web frontend container
  web:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      args:
        - BUILD_CONTEXT=frontend
    environment:
      - NODE_ENV=development
      - PORT=3000
    ports:
      - '3000:3000'
    volumes:
      - './frontend:/app/frontend'
      - './core:/app/core'
      - /app/node_modules
      - /app/frontend/node_modules
    networks:
      - appnetwork
    depends_on:
      - api

  # api server container
  api:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./api/Dockerfile
      args:
        - BUILD_CONTEXT=api
    environment:
      - NODE_ENV=development
      - PORT=5000
    ports:
      - '5000:5000'
    volumes:
      - './api:/app/api'
      - './core:/app/core'
      - /app/node_modules
      - /app/api/node_modules
    networks:
      - appnetwork
    depends_on:
      - postgres

  # db container for dev env
  postgres:
    image: postgres:13.4
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: app_db_dev
    ports:
      - '5432:5432'
    networks:
      - appnetwork
    volumes:
      - postgres-db:/var/lib/postgresql/data

  # db container for running integration tests against
  postgres_tests:
    image: postgres:13.4
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: app_integration_tests
    ports:
      - '5433:5432'
    networks:
      - appnetwork

networks:
  appnetwork:
    driver: bridge

volumes:
  postgres-db:
    driver: local
